name: "Pull Request Labeler"

on:
  pull_request:
  #   types:
  #     - opened
  #     - synchronize
  #     - reopened
  #     - ready_for_review
  #     - converted_to_draft
  # pull_request_review:
  #   types: [submitted]

jobs:
  call-labeler:
    uses: ulawil/common-wortkflows/.github/workflows/pr-labeler.yml@main
    with:
      github-token: ${{ secrets.LABELER_TOKEN }}
    permissions:
      contents: read
      pull-requests: write

# jobs:
#   label-custom:
#     permissions:
#       contents: read
#       pull-requests: write
#     runs-on: ubuntu-latest
#     steps:
#       - name: Label PR based on draft and reviews
#         uses: actions/github-script@v7
#         with:
#           github-token: ${{ secrets.LABELER_TOKEN }}
#           script: |
#             const labels = {
#               draft: 'Draft',
#               ready: 'PR Review',
#               needsReview: 'Needs 2nd Review',
#               readyToMerge: 'Ready to Merge',
#             };

#             const pr = context.payload.pull_request;
#             const owner = context.repo.owner;
#             const repo = context.repo.repo;
#             const issue_number = pr.number;

#             const { data: currentLabelsData } = await github.rest.issues.listLabelsOnIssue({
#               owner,
#               repo,
#               issue_number,
#             });
#             const currentLabels = new Set(currentLabelsData.map(label => label.name));

#             const labelsToAdd = new Set();
#             const labelsToRemove = new Set();

#             let targetLabel;

#             if (pr.draft) {
#               targetLabel = labels.draft;
#             } else {
#               const { data: reviews } = await github.rest.pulls.listReviews({
#                 owner,
#                 repo,
#                 pull_number: issue_number,
#               });

#               const approvedReviewers = new Set(
#                 reviews
#                   .filter(review => review.state === 'APPROVED')
#                   .map(review => review.user.login)
#               );

#               switch (approvedReviewers.size) {
#                 case 0:
#                   targetLabel = labels.ready;
#                   break;
#                 case 1:
#                   targetLabel = labels.needsReview;
#                   break;
#                 default:
#                   targetLabel = labels.readyToMerge;
#                   break;
#               }
#             }

#             if (!currentLabels.has(targetLabel)) {
#               labelsToAdd.add(targetLabel);
#             }

#             for (const label of Object.values(labels)) {
#               if (label !== targetLabel && currentLabels.has(label)) {
#                 labelsToRemove.add(label);
#               }
#             }

#             if (labelsToAdd.size > 0) {
#               await github.rest.issues.addLabels({
#                 owner,
#                 repo,
#                 issue_number,
#                 labels: Array.from(labelsToAdd),
#               });
#             }

#             for (const label of labelsToRemove) {
#               try {
#                 await github.rest.issues.removeLabel({
#                   owner,
#                   repo,
#                   issue_number,
#                   name: label,
#                 });
#               } catch (error) {
#                 if (error.status !== 404) {
#                   throw error;
#                 }
#               }
#             }

#   unit-test:
#     if: github.event.action != 'converted_to_draft'
#     runs-on: ubuntu-latest
#     steps:
#       - name: Dummy unit test
#         run: echo "Running dummy unit test"
