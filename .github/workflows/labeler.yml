name: "Pull Request Labeler"

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - converted_to_draft
  pull_request_review:
    types: [submitted]

jobs:
  label-custom:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Label PR based on draft and reviews
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.LABELER_TOKEN }}
          script: |
            const labels = {
              draft: 'Draft',
              ready: 'PR Review',
              needsReview: 'Needs 2nd Review',
              readyToMerge: 'Ready to Merge',
            };

            function addLabel(label, currentLabels, labelsToAdd) {
              if (!currentLabels.has(label)) labelsToAdd.add(label);
            }

            function removeLabel(label, currentLabels, labelsToRemove) {
              if (currentLabels.has(label)) labelsToRemove.add(label);
            }

            const { data: currentLabelsData } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });
            const currentLabels = new Set(currentLabelsData.map(l => l.name));
            const labelsToAdd = new Set();
            const labelsToRemove = new Set();

            const pr = context.payload.pull_request;

            if (pr.draft) {
              addLabel(labels.draft, currentLabels, labelsToAdd);
              [labels.ready, labels.needsReview, labels.readyToMerge].forEach(label =>
                removeLabel(label, currentLabels, labelsToRemove)
              );
            } else {
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
              });
              const approvedReviewers = new Set(
                reviews.filter(r => r.state === 'APPROVED').map(r => r.user.login)
              );
              const count = approvedReviewers.size;

              const labelsByReviewCount = {
                0: labels.ready,
                1: labels.needsReview,
              };

              let targetLabel = labelsByReviewCount[count] ?? labels.readyToMerge;

              addLabel(targetLabel, currentLabels, labelsToAdd);
              Object.values(labels).forEach(label => {
                if (label !== targetLabel) removeLabel(label, currentLabels, labelsToRemove);
              });
            }

            if (labelsToAdd.size) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: Array.from(labelsToAdd),
              });
            }

            for (const label of labelsToRemove) {
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  name: label,
                });
              } catch (e) {
                if (e.status !== 404) throw e;
              }
            }
