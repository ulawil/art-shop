name: "Pull Request Labeler"
  
on:
  pull_request:
    types: [opened, synchronize, reopened, converted_to_draft, ready_for_review]
  pull_request_review:
    types: [submitted]

jobs:
  # labeler:
  #   permissions:
  #     contents: read
  #     pull-requests: write
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/labeler@v5
  #       with:
  #         repo-token: ${{ secrets.LABELER_TOKEN }}

  label-custom:
    # needs: labeler
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Label PR as draft, ready, or based on reviews
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.LABELER_TOKEN }}
          script: |
            const draftLabel = 'Draft';
            const readyLabel = 'PR Review';
            const needsAnotherReviewLabel = 'Needs 2nd Review';
            const readyToMergeLabel = 'Ready to Merge';

            const { data: currentLabelsData } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
            });
            
            const currentLabels = currentLabelsData.map(label => label.name);
            const labelsToAdd = new Set();
            const labelsToRemove = new Set();

            if (pr.draft) {
              console.log(`PR #${pr.number} is draft`);
              if (!currentLabels.includes(draftLabel)) {
                labelsToAdd.add(draftLabel);
              }
              [readyLabel, needsAnotherReviewLabel, readyToMergeLabel].forEach(label => {
                if (currentLabels.includes(label)) labelsToRemove.add(label);
              });
            } else {
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
              });

              const approvedReviewers = new Set(
                reviews
                  .filter(review => review.state === 'APPROVED')
                  .map(review => review.user.login)
              );
              const reviewCount = approvedReviewers.size;
              console.log(`PR #${pr.number} has ${reviewCount} unique approvals`);

              let targetLabel;
              switch (reviewCount) {
                case 0:
                  targetLabel = readyLabel;
                  break;
                case 1:
                  targetLabel = needsAnotherReviewLabel;
                  break;
                default:
                  targetLabel = readyToMergeLabel;
              }

              if (!currentLabels.includes(targetLabel)) {
                labelsToAdd.add(targetLabel);
              }

              [draftLabel, readyLabel, needsAnotherReviewLabel, readyToMergeLabel].forEach(label => {
                if (label !== targetLabel && currentLabels.includes(label)) {
                  labelsToRemove.add(label);
                }
              });
            }

            if (labelsToAdd.size > 0) {
              console.log(`Adding labels: ${Array.from(labelsToAdd).join(', ')}`);
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: Array.from(labelsToAdd),
              });
            }

            for (const label of labelsToRemove) {
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  name: label,
                });
                console.log(`Removed label: ${label}`);
              } catch (e) {
                if (e.status === 404) {
                  console.log(`Label '${label}' not present, skipping removal.`);
                } else {
                  throw e;
                }
              }
            }

            
  unit-test:
    if: github.event_name != 'pull_request_review'
    runs-on: ubuntu-latest
    steps:
      - name: Dummy unit test step
        run: echo "Running unit tests"
        
